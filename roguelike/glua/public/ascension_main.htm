<html>
<head>
<meta charset="utf-8" />
<title>Ascension Main</title>
</head>
<body>
[Ascension Combat Main] - 
<button onclick="reloadView()">ReloadView</button>
<br>
<div id="div_2">
敌人 -- HP[<span id="hp_2"></span>] 
牌库[<span id="desk_2"></span>]
弃牌[<span id="discard_2"></span>]
手牌[<span id="hand_2"></span>] 
</div>
<hr/>
<table height="128">
	<tr>
		<td height="128" width="512">
			<div id="div_play_2"></div>
		</td>
		<td height="128" width="128">
			<div id="div_size_2"></div>
		</td>
	</tr>
</table>
<table height="128">
	<tr>
		<td height="128" width="512">
			<div id="div_play_1"></div>
		</td>
		<td height="128" width="128">
			<div id="div_size_1"></div>
		</td>
	</tr>
</table>
<hr/>
<div id="div_1">
　你 -- HP[<span id="hp_1"></span>] 
牌库[<span id="desk_1"></span>]
弃牌[<span id="discard_1"></span>]
<div id="div_hand_1"></div>
</div>
<script>
contentManager = {
	Init : function(viewData) {
		this.InitView(viewData);
		this.UpdateView(viewData);
	},
	Update : function(viewData) {
		// console.log("doUpdate!!!!")
		console.log(viewData)
		this.UpdateView(viewData);
	},
	Close : function() {

	},
	CellId : function(x,y) {
		return "c_"+x+"_"+y;
	},
	InitView : function(viewData) {
		this.cards = {};		
	},
	UpdateView : function(viewData) {
		this.sid = viewData.sid;
		this.tips = viewData.tips;
		var th = this;
		if(viewData.cards) {
			this.InitCards(viewData.cards);
		}
		processEvents(viewData.events, this.handleEvents, function() {			
			th.BuildInfo(viewData.players);
			// th.BuildMap(viewData.map);

			if(th.tips) {
				loadLib("libtips", function() {
					var text = th.tips.text;
					text = text.replace(/\n/g, "<br/>");
					var html = "";
					html += "<table>";
					html += "<tr><td>"+text+"</td></tr>";
					html += "<tr><td><button onclick='contentManager.doTips()'>知道了</button></td></tr>";
					html += "</table>";

					var x = 3;
					var y = 3;
					if(th.tips.pos) {
						x = th.tips.pos.x;
						y = th.tips.pos.y;
					}
					var tid = th.CellId(x, y);
					var id = showTips(html,tid, "#FFFFFF", "#000000");
					th.tips.id = id;
				});	
			}
		});
	},
	GetTips : function(cell) {		
		if(cell.t=="et") {
			return "入口。从这里出发探索地牢吧";
		}
		if(cell.t=="tr") {
			return "陷阱!!!";
		}
		if(cell.t=="ro") {
			return "碍事的石头";
		}
		if(cell.t=="out") {
			return "进入下一层地牢的通道";
		}
		if(cell.t=="lock") {
			return "关闭的通道大门。去寻找钥匙吧";
		}
		if(cell.t=="mo") {
			var str = "敌人 - ";
			str += "体力:"+cell.hp+";";
			str += "力量:"+cell.power+";";
			str += "防盾:"+cell.def+";";
			return str;
		}
		return "";
	},
	CSet : function(cset) {
		if(cset=="empty")return [];
		return cset;
	},
	ShowCard : function(c, sz) {
		if(!sz)sz=100;
		var html = "";
		html += "<img src='images/card_"+c.t+".png' height="+sz+" border=1>";
		return html;
	},
	BuildInfo : function(players) {		
		if(!players)return;		
		this.players = players;
		for (var i = 0; i < players.length; i++) {
			var pl = players[i];
			var pid = i + 1;
			$("#hp_"+pid).html(pl.HP+"/"+pl.MAXHP);
			var sets = pl.sets;
			if(!sets)continue;

			for (var j = 0; j < sets.length; j++) {
				var cset = this.CSet(sets[j]);
				var csid = j + 1;
				if(csid==1) {
					$("#desk_"+pid).html(cset);
				} else if(csid==2) {
					if(pid==2) {
						$("#hand_"+pid).html(cset);
					}
				} else if(csid==3) {
					console.log(cset);
					var html = "";
					for (var k = 0; k < cset.length; k++) {
						var cid = cset[k];
						var c = this.cards[cid];
						console.log(cid, c);
						if(c==null) {
							console.log("ERROR: card["+cid+"] is null");
							continue;
						}
						html += this.ShowCard(c);
					}
					$('#div_play_'+pid).html(html);
				} else if(csid==5) {
					var html = "";
					html = "<button >"+cset.length+"</button>"
					$("#discard_"+pid).html(html);
				}
			}
		}
	},
	InitCards : function(cards) {
		this.cards = {};
		for (var i = 0; i < cards.length; i++) {
			var c = cards[i];
			this.cards[c.id] = c;
		}
	},
	BuildMap : function(map) {
		if(map)	{
			for (var i = 0; i < map.length; i++) {
				var cell = map[i];
				var x = cell.x;
				var y = cell.y;
				var html = "";
				var img = "hide_1";
				var clickable = cell.c?cell.c==1:false;
				var block = cell.b && cell.b>0;
				var light = cell.l && cell.l==1;
				var alt = "";
				if(cell.h>0) {
					img = "hide_"+cell.h;
					if(light) {
						clickable = cell.h!=2;
						alt = "点击探索";		
					}
				} else {
					img = "cell_"+cell.t;
					if(cell.t=="mo") {
						img = img + "_" + cell.mt;
					}
				}
				var css = "";
				var border = 0;
				if(clickable) {
					if(block) {
						css = "style='border-color:#FF0000'";
						border = 3;
					} else {
						html += "<a href='#' onclick='return contentManager.doClick("+x+","+y+")'>";
					}
				}
				var size = 64-2*border;
				if(alt=="")alt = this.GetTips(cell);
				if(alt!="")alt = " title = '"+alt+"'";
				html += "<img src='images/"+img+".png' width="+size+" height="+size+" border="+border+" "+css+alt+"/>";
				if(clickable && !block) {
					html += "</a>";
				}
				var co = $('#'+this.CellId(x,y));
				co.html(html);
				co.css("opacity", light?1:0.6);
			}
		}
	},
	handleEvents : function(ev, nextf) {
		if(ev.t=="msg") {
			alert(ev.text);
		}else if(ev.t=="die") {
			var id = contentManager.CellId(ev.x, ev.y);
			$("#"+id+" img").fadeOut(250, nextf);
			return;
		}else if(ev.t=="hit") {
			var id = contentManager.CellId(ev.x, ev.y);
			var o = $("#"+id+" img");
			o.fadeOut(100, function() {
				o.fadeIn(100, nextf);
			});
			return;
		}
		nextf();
	},
	doClick : function(x, y) {
		if(this.tips) {
			console.log("in Tips mode");
			return false;
		}
		var cb = function(data) {
			// console.log("here");
			return true;
		}
		var p = {cmd:"click", x:x, y:y};
		doUIProcess(this.sid, p, cb);
		return false;
	},
	doTips : function() {
		var id = this.tips.id
		closeTips(id);

		var cb = function(data) {
			// console.log("here");
			return true;
		}
		var p = {cmd:"tips"};
		doUIProcess(this.sid, p, cb);
		return false;
	},
	ISEnd : false
}
</script>

</body>
</html>